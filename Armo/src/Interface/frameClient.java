package Interface;

import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import logic.Client;
import Persistence.FlatFileClient;
import Persistence.FlatFileUser;
import Persistence.MSAccessA;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Yesica Daniela Vargas Espitia
 * @author Andres Mauricio Perez Escobar
 */
public class frameClient extends javax.swing.JFrame {
 private MSAccessA dataFile;
 
    public frameClient() {
        initComponents();
     
        this.setDataFile(new MSAccessA());
        this.selectClient();
    }

     public MSAccessA getDataFile() {
        return dataFile;
    }

    public void setDataFile(MSAccessA dataFile) {
        this.dataFile = dataFile;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labClient = new javax.swing.JLabel();
        labNIT = new javax.swing.JLabel();
        textNIT = new javax.swing.JTextField();
        textName = new javax.swing.JTextField();
        labName = new javax.swing.JLabel();
        labPhone = new javax.swing.JLabel();
        textPhone = new javax.swing.JTextField();
        labAddress = new javax.swing.JLabel();
        textAddress = new javax.swing.JTextField();
        btnFirst = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext1 = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();

        labClient.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        labClient.setText("Client");

        labNIT.setText("NIT");

        textName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNameActionPerformed(evt);
            }
        });

        labName.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labName.setText("Name");

        labPhone.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labPhone.setText("Phone");

        labAddress.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labAddress.setText("Address");

        btnFirst.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPrevious.setText("<");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNext1.setText(">");
        btnNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNext1ActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch.setText("Search ...");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labAddress)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labNIT)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(labClient))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textNIT, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textPhone, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textAddress, javax.swing.GroupLayout.Alignment.TRAILING)))))
                    .addComponent(labName)
                    .addComponent(labPhone))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addGap(10, 10, 10)
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btnFirst)
                        .addGap(16, 16, 16)
                        .addComponent(btnPrevious)
                        .addGap(18, 18, 18)
                        .addComponent(btnNext1)
                        .addGap(18, 18, 18)
                        .addComponent(btnLast)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labClient)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labNIT)
                    .addComponent(textNIT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labName)
                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labPhone)
                    .addComponent(textPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labAddress)
                    .addComponent(textAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext1)
                    .addComponent(btnLast)
                    .addComponent(btnFirst)
                    .addComponent(btnPrevious))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete)
                    .addComponent(btnNew)
                    .addComponent(btnUpdate))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNameActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
       try {
            this.getDataFile().getResultSet().first();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(frameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
       
         try {
            if (!this.getDataFile().getResultSet().isFirst()) {
                this.getDataFile().getResultSet().previous();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNext1ActionPerformed
      try {
            if (!this.getDataFile().getResultSet().isLast()) {
                this.getDataFile().getResultSet().next();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameClient.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }//GEN-LAST:event_btnNext1ActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
          try {
            this.getDataFile().getResultSet().last();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(frameClient.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
  if (JOptionPane.showConfirmDialog(this, 
                "Are you sure to delete this record?", "Delete record", 
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

            this.deleteClient();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
                JOptionPane.INFORMATION_MESSAGE);
        }    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.updateClient();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
          if (btnNew.getText().equals("New")) {
            this.newView();
        }
        else if (btnNew.getText().equals("Save")) {
            if (validateView()) {
                this.insertClient();

                btnNew.setText("New");
                btnFirst.setEnabled(true);
                btnPrevious.setEnabled(true);
                btnNext1.setEnabled(true);
                btnLast.setEnabled(true);
                btnSearch.setEnabled(true);
                btnUpdate.setEnabled(true);
                btnDelete.setEnabled(true);
            }
            else {
                JOptionPane.showMessageDialog(this, "Please, fill the requeried fields", 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        long id = Long.parseLong(JOptionPane.showInputDialog("Please, write the client id", "Client id"));
        if (id > 0){
             this.searchClient(id);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext1;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel labAddress;
    private javax.swing.JLabel labClient;
    private javax.swing.JLabel labNIT;
    private javax.swing.JLabel labName;
    private javax.swing.JLabel labPhone;
    private javax.swing.JTextField textAddress;
    private javax.swing.JTextField textNIT;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textPhone;
    // End of variables declaration//GEN-END:variables
 
     private boolean validateView() {
        boolean validate = !(textNIT.getText().equals("") 
                || textName.getText().equals("")
                || textPhone.getText().equals("")
                || textAddress.getText().equals(""));       
        return validate;
    }
     
      /**
     * Obtain the view data and tranfer it to the object
     */
    private Client view2Object() {
        Client client = new Client();

        client.setNIT(Integer.parseInt(textNIT.getText()));
        client.setNameClient(textName.getText());
        client.setPhone(Integer.parseInt(textPhone.getText()));
        client.setAdrress(textAddress.getText());
        
        return client;
    }
    
    
    /**
     * You obtain data from an object and pass it to the view
     */
    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
    }

    /**
     * You prepare the view to enter a new employee data
     */
    private void newView() {
        
        textNIT.setText("");
        textName.setText("");
        textPhone.setText("");
        textAddress.setText("");
               
        btnNew.setText("save");
        btnFirst.setEnabled(false);
        btnPrevious.setEnabled(false);
        btnNext1.setEnabled(false);
        btnLast.setEnabled(false);
        btnSearch.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }

    /**
     * Result set -> object
     */
    private void object2View() {
        Client client = new Client();
        try {
             client.setNIT(this.getDataFile().getResultSet().getInt("NIT"));
             client.setNameClient(this.getDataFile().getResultSet().getString("nameClient"));
             client.setPhone(this.getDataFile().getResultSet().getInt("phone"));
             client.setAdrress(this.getDataFile().getResultSet().getString("address"));
             
            this.object2View(client);
        } catch (SQLException ex) {
            Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

     /**
     * Show the object data into view
     * @param employee Employee to show
     */
    private void object2View(Client client) {
        
        textNIT.setText(""+ client.getNIT());
        textName.setText(client.getNameClient());
        textPhone.setText("" + client.getPhone());
        textAddress.setText(""+ client.getAdrress());
        }
    
    /**
     * Select employees from DB
     */
    private void selectClient() {
        String query = "SELECT * FROM Client";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateView();
            } catch (SQLException ex) {
                Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
      /**
     * Insert new employee
     */
    private void insertClient() {
        Client client = this.view2Object();
      
        String query = "INSERT INTO Client "
                + "(NIT, nameClient, phone, address) "
                + "VALUES ("
                + client.getNIT() + ", '"
                + client.getNameClient()+ "', '"
                + client.getPhone()+ ", '"
                + client.getAdrress() + ")";
                
        if (this.getDataFile().execute(query)) {
            this.selectClient();
            this.searchClient(client.getNIT());
        }
    }

    
    /**
     * Update employee
     */
    private void updateClient() {
        Client client = this.view2Object();

        String query = "UPDATE User SET "
                + "nameClient = '" + client.getNameClient()+ "', "
                + "phone = '" + client.getPhone()+ ", '"
                + "address = '" +  client.getAdrress()+ ""
                + "WHERE NIT =" + client.getNIT();
       
           if (this.getDataFile().execute(query)) {
            this.selectClient();
            this.searchClient(client.getNIT());
        }
    }
    
    /**
     * Delete employee
     */
    private void deleteClient() {
        Client client = this.view2Object();
        String query = "DELETE * FROM Client WHERE NIT = " + client.getNIT();
        if (this.getDataFile().execute(query)) {
            this.selectClient();
        }        
    }

    /**
     * Search employee by id
     * @param id Employee id
     */
    private void searchClient(long NIT) {
        boolean find = false;
        try {
            if (this.getDataFile().getResultSet() != null) {
                Long lastNIT = this.getDataFile().getResultSet().getLong("NIT");
                this.getDataFile().getResultSet().beforeFirst();
                while (this.getDataFile().getResultSet().next()) {
                    if (this.getDataFile().getResultSet().getLong("NIT") == NIT) {
                        find = true;
                        break;
                    }
                }
                if (find) {
                    this.updateView();
                }
                else {
                    this.getDataFile().getResultSet().first();
                    this.searchClient(lastNIT);
                    JOptionPane.showMessageDialog(this, "Client " + NIT + " was not found!");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
  
}
