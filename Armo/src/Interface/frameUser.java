package Interface;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import Persistence.MSAccessA;
import java.sql.SQLException;
import logic.User;

/**
 *
 * @author Yesica Daniela Vargas Espitia
 * @author Andres Mauricio Perez Escobar
 */
public class frameUser extends javax.swing.JFrame {
    
     private ImageIcon iconusuario;
     private MSAccessA dataFile;

      /**
     * Creates new form FrameUser
     */
    public frameUser() {
     initComponents();
        lblImagenUsuario.setVisible(false);
        this.setIconusuario((ImageIcon)LabPhoto.getIcon());
        this.setDataFile(new MSAccessA());
        this.selectUser();
    }

    public ImageIcon getIconusuario() {
        return iconusuario;
    }

    public void setIconusuario(ImageIcon iconusuario) {
        this.iconusuario = iconusuario;
    }

    public MSAccessA getDataFile() {
        return dataFile;
    }

    public void setDataFile(MSAccessA dataFile) {
        this.dataFile = dataFile;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labRegisterUser = new javax.swing.JLabel();
        labName = new javax.swing.JLabel();
        textName = new javax.swing.JTextField();
        labLastName = new javax.swing.JLabel();
        labID = new javax.swing.JLabel();
        labUser = new javax.swing.JLabel();
        labPassword = new javax.swing.JLabel();
        textLastName = new javax.swing.JTextField();
        textID = new javax.swing.JTextField();
        textUser = new javax.swing.JTextField();
        textPassword = new javax.swing.JTextField();
        LabPhoto = new javax.swing.JLabel();
        butUploadFile = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext1 = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        lblImagenUsuario = new javax.swing.JLabel();
        labType = new javax.swing.JLabel();
        radAdmi = new javax.swing.JRadioButton();
        radUser = new javax.swing.JRadioButton();

        setTitle("Register User");

        labRegisterUser.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        labRegisterUser.setText("Register User");

        labName.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labName.setText("Name");

        textName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNameActionPerformed(evt);
            }
        });

        labLastName.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labLastName.setText("Last Name");

        labID.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labID.setText("ID");

        labUser.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labUser.setText("User");

        labPassword.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labPassword.setText("Password");

        LabPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/usuario.PNG"))); // NOI18N

        butUploadFile.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        butUploadFile.setText("Upload File.jpg");
        butUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUploadFileActionPerformed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPrevious.setText("<");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNext1.setText(">");
        btnNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNext1ActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch.setText("Search ...");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        labType.setText("Type");

        radAdmi.setText("Administrator");
        radAdmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radAdmiActionPerformed(evt);
            }
        });

        radUser.setText("User");
        radUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labUser)
                                    .addComponent(labPassword)
                                    .addComponent(labType))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textUser)
                                            .addComponent(textPassword)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(radAdmi)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(radUser)
                                        .addGap(0, 2, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labLastName)
                                    .addComponent(labName)
                                    .addComponent(labID))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textName)
                                    .addComponent(textID)
                                    .addComponent(textLastName))))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabPhoto)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(butUploadFile))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSearch)
                        .addGap(10, 10, 10)
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btnFirst)
                        .addGap(16, 16, 16)
                        .addComponent(btnPrevious)
                        .addGap(18, 18, 18)
                        .addComponent(btnNext1)
                        .addGap(18, 18, 18)
                        .addComponent(btnLast)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(labRegisterUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblImagenUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labRegisterUser)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblImagenUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(butUploadFile))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labName)
                            .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labLastName)
                            .addComponent(textLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labID)
                            .addComponent(textID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labUser)
                            .addComponent(textUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labPassword)
                            .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labType)
                            .addComponent(radAdmi)
                            .addComponent(radUser))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext1)
                    .addComponent(btnLast)
                    .addComponent(btnFirst)
                    .addComponent(btnPrevious))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete)
                    .addComponent(btnNew)
                    .addComponent(btnUpdate))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNameActionPerformed

    private void butUploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUploadFileActionPerformed
         JFileChooser fc = new JFileChooser();
        int select = fc.showOpenDialog(this);
        if (select == JFileChooser.APPROVE_OPTION){   
        try {
            File photoFile = fc.getSelectedFile();
                LabPhoto.setText(photoFile.getCanonicalPath());
                ImageIcon iconPhoto = new ImageIcon(LabPhoto.getText());
                lblImagenUsuario.setIcon(iconPhoto);  
            } catch (IOException ex) {
                Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_butUploadFileActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        
       try {
            this.getDataFile().getResultSet().first();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        
         try {
            if (!this.getDataFile().getResultSet().isFirst()) {
                this.getDataFile().getResultSet().previous();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNext1ActionPerformed
       try {
            if (!this.getDataFile().getResultSet().isLast()) {
                this.getDataFile().getResultSet().next();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNext1ActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        try {
            this.getDataFile().getResultSet().last();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, 
                "Are you sure to delete this record?", "Delete record", 
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

            this.deleteUser();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
                JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
         this.updateUser();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        if (btnNew.getText().equals("New")) {
            this.newView();
        }
        else if (btnNew.getText().equals("Save")) {
            if (validateView()) {
                this.insertUser();

                btnNew.setText("New");
                btnFirst.setEnabled(true);
                btnPrevious.setEnabled(true);
                btnNext1.setEnabled(true);
                btnLast.setEnabled(true);
                btnSearch.setEnabled(true);
                btnUpdate.setEnabled(true);
                btnDelete.setEnabled(true);
            }
            else {
                JOptionPane.showMessageDialog(this, "Please, fill the requeried fields", 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        long id = Long.parseLong(JOptionPane.showInputDialog("Please, write the user id", "User id"));
        if (id > 0){
             this.searchUser(id);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void radAdmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radAdmiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radAdmiActionPerformed

    private void radUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radUserActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new frameUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabPhoto;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext1;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton butUploadFile;
    private javax.swing.JLabel labID;
    private javax.swing.JLabel labLastName;
    private javax.swing.JLabel labName;
    private javax.swing.JLabel labPassword;
    private javax.swing.JLabel labRegisterUser;
    private javax.swing.JLabel labType;
    private javax.swing.JLabel labUser;
    private javax.swing.JLabel lblImagenUsuario;
    private javax.swing.JRadioButton radAdmi;
    private javax.swing.JRadioButton radUser;
    private javax.swing.JTextField textID;
    private javax.swing.JTextField textLastName;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textPassword;
    private javax.swing.JTextField textUser;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Validate the view for save
     * @return True is ok
     */
    private boolean validateView() {
        boolean validate = !(textName.getText().equals("") 
                || textLastName.getText().equals("")
                || textID.getText().equals("")
                || textUser.getText().equals("")
                || textPassword.getText().equals(""));         
        return validate;
    }
    
    /**
     * Obtain the view data and tranfer it to the object
     */
    private User view2Object() {
        User user = new User();

        user.setID(Integer.parseInt(textID.getText()));
        user.setName(textName.getText());
        user.setLastName(textLastName.getText());
        user.setLogin(textUser.getText());
        user.setPassword(textPassword.getText());
        user.setPhoto(lblImagenUsuario.getText());
        user.setType(radAdmi.isSelected() ? 0 : 1);
              
        return user;
    }
    
     /**
     * You obtain data from an object and pass it to the view
     */
    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
    }

    /**
     * You prepare the view to enter a new employee data
     */
    private void newView() {
        
        textName.setText("");
        textLastName.setText("");
        textID.setText("");
        textUser.setText("");
        textPassword.setText("");
        lblImagenUsuario.setIcon(this.getIconusuario());                     
        ImageIcon photo = new ImageIcon (lblImagenUsuario.getText());
        lblImagenUsuario.setIcon(photo);
        radAdmi.setSelected(true);
               
        btnNew.setText("Save");
        btnFirst.setEnabled(false);
        btnPrevious.setEnabled(false);
        btnNext1.setEnabled(false);
        btnLast.setEnabled(false);
        btnSearch.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }

    /**
     * Result set -> object
     */
    private void object2View() {
        User user = new User();
        try {
             user.setName(this.getDataFile().getResultSet().getString("name"));
             user.setLastName(this.getDataFile().getResultSet().getString("lastname"));
             user.setID(this.getDataFile().getResultSet().getLong("id"));
             user.setLogin(this.getDataFile().getResultSet().getString("username"));
             user.setPassword(this.getDataFile().getResultSet().getString("password"));
             user.setPhoto(
                     (this.getDataFile().getResultSet().getString("photo")==null)
                            ? "" : this.getDataFile().getResultSet().getString("photo"));
             user.setType(this.getDataFile().getResultSet().getInt("type"));
            
            this.object2View(user);
        } catch (SQLException ex) {
            Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

     /**
     * Show the object data into view
     * @param employee Employee to show
     */
    private void object2View(User user) {
        
        textName.setText(user.getName());
        textLastName.setText(user.getLastName());
        textID.setText("" + user.getID());
        textUser.setText(user.getLogin());
        textPassword.setText(user.getPassword());

        if (user.getPhoto().equals("")) {
            lblImagenUsuario.setText("");
            LabPhoto.setIcon(this.getIconusuario());
        }
        else {
            lblImagenUsuario.setText(user.getPhoto());
            ImageIcon iconPhoto = new ImageIcon(lblImagenUsuario.getText());
            LabPhoto.setIcon(iconPhoto);
        }
        radAdmi.setSelected(user.getType() == 0);
         }
    
    /**
     * Select employees from DB
     */
    private void selectUser() {
        String query = "SELECT * FROM User";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateView();
            } catch (SQLException ex) {
                Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
     /**
     * Insert new employee
     */
    private void insertUser() {
        User user = this.view2Object();
      
        String query = "INSERT INTO User "
                + "(name, lastname, id, username, password, photo, type) "
                + "VALUES ("
                + user.getName() + "', '"
                + user.getLastName()+ "', '"
                + user.getID() + ", '"
                + user.getLogin()+ "', '"
                + user.getPassword()+ "', '"
                + user.getPhoto()+ "', "
                + user.getType()  + ")";
        if (this.getDataFile().execute(query)) {
            this.selectUser();
            this.searchUser(user.getID());
        }
    }

    
    /**
     * Update employee
     */
    private void updateUser() {
        User user = this.view2Object();

        String query = "UPDATE User SET "
                + "name = '" + user.getName()+ "', "
                + "lastname = '" + user.getLastName() + "', "
                + "userame = '" + user.getLogin() + "', "
                + "password = '" + user.getPassword() + "', '"
                + "photo = '" + user.getPhoto() + "', "
                + "type = " + user.getType() + ", "
                + "WHERE id = " + user.getID();
        if (this.getDataFile().execute(query)) {
            this.selectUser();
            this.searchUser(user.getID());
        }
    }
    
    /**
     * Delete employee
     */
    private void deleteUser() {
        User user = this.view2Object();
        String query = "DELETE * FROM User WHERE id = " + user.getID();
        if (this.getDataFile().execute(query)) {
            this.selectUser();
        }        
    }

    /**
     * Search employee by id
     * @param id Employee id
     */
    private void searchUser(long id) {
        boolean find = false;
        try {
            if (this.getDataFile().getResultSet() != null) {
                Long lastId = this.getDataFile().getResultSet().getLong("id");
                this.getDataFile().getResultSet().beforeFirst();
                while (this.getDataFile().getResultSet().next()) {
                    if (this.getDataFile().getResultSet().getLong("id") == id) {
                        find = true;
                        break;
                    }
                }
                if (find) {
                    this.updateView();
                }
                else {
                    this.getDataFile().getResultSet().first();
                    this.searchUser(lastId);
                    JOptionPane.showMessageDialog(this, "User " + id + " was not found!");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
  
}
