package Interface;

import Persistence.FlatFileSupply;
import Persistence.MSAccessA;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logic.Supply;



/**
 *
 * @author Yesica Daniela Vargas Espitia
 * @author Andres Mauricio Perez Escobar
 */

public class frameSupply extends javax.swing.JFrame {
  
    private int userType;
     private MSAccessA dataFile;

   
    public frameSupply() {
       initComponents();
       
        this.setDataFile(new MSAccessA());
        this.selectSupply();
    }

//    public frameSupply(int userType) {
//        this.userType = userType;
//        FlatFileSupply dataFile = new FlatFileSupply ();
//        this.setSupplyList(dataFile.readFile(fileName,separator));
//        this.setIndexSupply(this.getSupplyList().size() > 0 ? 0 : -1);
//        
//        initComponents();
//        
//        if (this.userType == 1) {
//            btnUpdate.setEnabled(false);
//            btnDelete.setEnabled(false);
//        }
//    }
    
  public MSAccessA getDataFile() {
        return dataFile;
    }

    public void setDataFile(MSAccessA dataFile) {
        this.dataFile = dataFile;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        texIdCity = new javax.swing.JTextField();
        texId = new javax.swing.JTextField();
        labShearSupply = new javax.swing.JLabel();
        labPrice = new javax.swing.JLabel();
        texName = new javax.swing.JTextField();
        labDate = new javax.swing.JLabel();
        labIdCity = new javax.swing.JLabel();
        lanName = new javax.swing.JLabel();
        labId = new javax.swing.JLabel();
        texPrice = new javax.swing.JTextField();
        labIdCliente = new javax.swing.JLabel();
        texIdCliente = new javax.swing.JTextField();
        btnFirst = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        labProduct = new javax.swing.JLabel();
        texIdProduct = new javax.swing.JTextField();

        texIdCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texIdCityActionPerformed(evt);
            }
        });

        texId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texIdActionPerformed(evt);
            }
        });

        labShearSupply.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        labShearSupply.setText("Register Supply");

        labPrice.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labPrice.setText("Price:");

        texName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texNameActionPerformed(evt);
            }
        });

        labDate.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labDate.setText("Date:");

        labIdCity.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labIdCity.setText("Id City");

        lanName.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        lanName.setText("Name:");

        labId.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labId.setText("Id");

        texPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texPriceActionPerformed(evt);
            }
        });

        labIdCliente.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labIdCliente.setText("Id Cliente");

        texIdCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texIdClienteActionPerformed(evt);
            }
        });

        btnFirst.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPrevious.setText("<");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNext.setText(">");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch.setText("Search ...");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        labProduct.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        labProduct.setText("Id Product:");

        texIdProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texIdProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labShearSupply)
                .addGap(109, 109, 109))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSearch)
                .addGap(10, 10, 10)
                .addComponent(btnNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(btnFirst)
                        .addGap(16, 16, 16)
                        .addComponent(btnPrevious)
                        .addGap(18, 18, 18)
                        .addComponent(btnNext)
                        .addGap(18, 18, 18)
                        .addComponent(btnLast))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labIdCliente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(texIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labPrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(texPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(labIdCity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(texIdCity, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lanName)
                                .addGap(110, 110, 110)
                                .addComponent(texName, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labProduct)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(texIdProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labId)
                                    .addComponent(labDate))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(texId, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(labShearSupply)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(texId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lanName)
                    .addComponent(texName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labIdCity)
                    .addComponent(texIdCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labPrice)
                    .addComponent(texPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labProduct)
                    .addComponent(texIdProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labIdCliente)
                    .addComponent(texIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(btnLast)
                    .addComponent(btnFirst)
                    .addComponent(btnPrevious))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete)
                    .addComponent(btnNew)
                    .addComponent(btnUpdate))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void texIdCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texIdCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_texIdCityActionPerformed

    private void texIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_texIdActionPerformed

    private void texNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_texNameActionPerformed

    private void texPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_texPriceActionPerformed

    private void texIdClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texIdClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_texIdClienteActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
      try {
            this.getDataFile().getResultSet().first();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(frameSupply.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
       
         try {
            if (!this.getDataFile().getResultSet().isFirst()) {
                this.getDataFile().getResultSet().previous();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameSupply.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
       try {
            if (!this.getDataFile().getResultSet().isLast()) {
                this.getDataFile().getResultSet().next();
                this.updateView();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameSupply.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
           try {
            this.getDataFile().getResultSet().last();
            this.updateView();
        } catch (SQLException ex) {
            Logger.getLogger(frameSupply.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int id = Integer.parseInt(JOptionPane.showInputDialog("Please, write the supply id", "Supply id"));
        if (id > 0){
             this.searchSupply(id);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
           if (btnNew.getText().equals("New")) {
            this.newView();
        }
        else if (btnNew.getText().equals("Save")) {
            if (validateView()) {
                this.insertSupply();

                btnNew.setText("New");
                btnFirst.setEnabled(true);
                btnPrevious.setEnabled(true);
                btnNext.setEnabled(true);
                btnLast.setEnabled(true);
                btnSearch.setEnabled(true);
                btnUpdate.setEnabled(true);
                btnDelete.setEnabled(true);
            }
            else {
                JOptionPane.showMessageDialog(this, "Please, fill the requeried fields", 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
         this.updateSupply();
        JOptionPane.showMessageDialog(this, "Updated record!", "Update record",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
         if (JOptionPane.showConfirmDialog(this, 
                "Are you sure to delete this record?", "Delete record", 
                JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

            this.deleteSupply();
            JOptionPane.showMessageDialog(this, "Deleted record!", "Delete record",
                JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void texIdProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texIdProductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_texIdProductActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameSupply.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameSupply().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel labDate;
    private javax.swing.JLabel labId;
    private javax.swing.JLabel labIdCity;
    private javax.swing.JLabel labIdCliente;
    private javax.swing.JLabel labPrice;
    private javax.swing.JLabel labProduct;
    private javax.swing.JLabel labShearSupply;
    private javax.swing.JLabel lanName;
    private javax.swing.JTextField texId;
    private javax.swing.JTextField texIdCity;
    private javax.swing.JTextField texIdCliente;
    private javax.swing.JTextField texIdProduct;
    private javax.swing.JTextField texName;
    private javax.swing.JTextField texPrice;
    // End of variables declaration//GEN-END:variables

 private boolean validateView() {
        boolean validate = !(texId.getText().equals("") 
                || texName.getText().equals("")
                || texIdCity.getText().equals("")
/**                || (jchDate.getDate() == null)*/
                || texPrice.getText().equals("")
                || texIdProduct.getText().equals("")
                || texIdCliente.getText().equals(""));         
        return validate;
    }
    
 
     /**
     * Obtain the view data and tranfer it to the object
     */
    private Supply view2Object() {
        Supply supply = new Supply();

        supply.setId(Integer.parseInt(texId.getText()));
        supply.setName(texName.getText());
        supply.setIdCity(Integer.parseInt(texIdCity.getText()));
   //     supply.setDate(jchDate.getDate());
        supply.setPrice(Integer.parseInt(texPrice.getText()));
        supply.setIdProduct(Integer.parseInt(texIdProduct.getText()));
        supply.setIdClient(Integer.parseInt(texIdCliente.getText()));
              
        return supply;
    }
    
    /**
     * You obtain data from an object and pass it to the view
     */
    private void updateView() {
        if (this.getDataFile().getResultSet() == null) {
            this.newView();
        }
        else {
            this.object2View();
        }
    }

    /**
     * You prepare the view to enter a new employee data
     */
    private void newView() {
        
        texId.setText("");
        texName.setText("");
        texIdCity.setText("");
    //    jchDate.setDate(new Date());
        texPrice.setText("");
        texIdProduct.setText("");
        texIdCliente.setText("");
        
               
        btnNew.setText("save");
        btnFirst.setEnabled(false);
        btnPrevious.setEnabled(false);
        btnNext.setEnabled(false);
        btnLast.setEnabled(false);
        btnSearch.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }

    /**
     * Result set -> object
     */
    private void object2View() {
        Supply supply = new Supply();
        try {
             supply.setId(this.getDataFile().getResultSet().getInt("id"));
             supply.setName(this.getDataFile().getResultSet().getString("nameSupply"));
             supply.setIdCity(this.getDataFile().getResultSet().getInt("idCity"));
             supply.setDate(this.getDataFile().getResultSet().getDate("date"));
             supply.setPrice(this.getDataFile().getResultSet().getInt("price"));
             supply.setIdProduct(this.getDataFile().getResultSet().getInt("idProduct"));
             supply.setIdClient(this.getDataFile().getResultSet().getInt("idClient"));


            this.object2View(supply);
        } catch (SQLException ex) {
            Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

     /**
     * Show the object data into view
     * @param employee Employee to show
     */
    private void object2View(Supply supply) {
        
        texId.setText(""+supply.getId());
        texName.setText(supply.getName());
        texIdCity.setText("" + supply.getIdCity());
    //    jchDate.setDate(supply.getDate());
        texPrice.setText(""+supply.getPrice());
        texIdProduct.setText(""+ supply.getIdProduct());
        texIdCliente.setText(""+ supply.getIdClient());
       
         }
    
    /**
     * Select employees from DB
     */
    private void selectSupply() {
        String query = "SELECT * FROM Supply";
        if (this.getDataFile().execute(query)) {
            try {
                this.getDataFile().getResultSet().next();
                this.updateView();
            } catch (SQLException ex) {
                Logger.getLogger(frameUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * Insert new employee
     */
    private void insertSupply() {
        Supply supply = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "INSERT INTO Supply "
                + "(id, nameSupply, idCity, date, price, idProduct, idClient) "
                + "VALUES ("
                + supply.getId() + ", '"
                + supply.getName() + "', '"
                + supply.getIdCity() + ", #"
                + dateFormat.format(supply.getDate()) + "#, "
                + supply.getPrice() + ", '"
                + supply.getIdProduct() + "', '"
                + supply.getIdClient()+ ")";
        if (this.getDataFile().execute(query)) {
            this.selectSupply();
            this.searchSupply(supply.getId());
        }
    }

    /**
     * Update employee
     */
    private void updateSupply() {
        Supply supply = this.view2Object();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        String query = "UPDATE Supply SET "
                + "nameSupply = '" + supply.getName() + "', "
                + "idCity = '" + supply.getIdCity() + "', "
                + "date = #" + supply.getDate() + "#, "
                + "price = " + supply.getPrice() + "', "
                + "idProduct = '" + supply.getIdProduct() + "', "
                + "idClient = '" + supply.getIdCity();
                
        if (this.getDataFile().execute(query)) {
            this.selectSupply();
            this.searchSupply(supply.getId());
        }
    }

    /**
     * Delete employee
     */
    private void deleteSupply() {
        Supply supply = this.view2Object();
        String query = "DELETE * FROM Supply WHERE id = " + supply.getId();
        if (this.getDataFile().execute(query)) {
            this.selectSupply();
        }        
    }

    /**
     * Search employee by id
     * @param id Employee id
     */
    private void searchSupply(long id) {
        boolean find = false;
        try {
            if (this.getDataFile().getResultSet() != null) {
                Long lastId = this.getDataFile().getResultSet().getLong("id");
                this.getDataFile().getResultSet().beforeFirst();
                while (this.getDataFile().getResultSet().next()) {
                    if (this.getDataFile().getResultSet().getLong("id") == id) {
                        find = true;
                        break;
                    }
                }
                if (find) {
                    this.updateView();
                }
                else {
                    this.getDataFile().getResultSet().first();
                    this.searchSupply(lastId);
                    JOptionPane.showMessageDialog(this, "Supply " + id + " was not found!");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(frameSupply.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}

